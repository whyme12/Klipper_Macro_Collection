# This macro allows to load bed meshes based on bed temperatures
# The meshes have to be stored in a specific format, that contains the bed temperature when they were measured.
# The macro extracts all temperatures of the stored meshes in that format and loads the one closest to the bed temperature.
# If there is no mesh found within a specific range, the macro errors out.

[gcode_macro LOAD_MESH_IN_RANGE]
variable_mesh_naming_start: 'bed_'    # meshes have to be stored in a specific syntax to be searched
variable_mesh_naming_end: 'C'         # in this case bed_60C for a mesh at 60°C
variable_mesh_temp_range: 10          # find a mesh with the closest temperature within a certain range (+- 10°C)
gcode:
  {% set bed_temp = params.BED_TEMP|int(-1) %}
  {% set mesh_profiles = printer.bed_mesh.profiles %}
  {% if bed_temp != -1 %}
    {% set profile = namespace() %}
    {% set profile.temp_diff = 999 %}
    {% for mesh in mesh_profiles.items() %}
      {% set name = mesh[0]|string %}
      {% if (name.startswith(mesh_naming_start)) and (name.endswith(mesh_naming_end)) %}
        {% set temp = name|replace(mesh_naming_start,"")|replace(mesh_naming_end,"")|int(-1) %}
        {% if temp != -1 %}
          {% set temp_diff = (temp - bed_temp)|abs %}
          {% if temp_diff < profile.temp_diff %}
            {% set profile.temp_diff = temp_diff %}
            {% set profile.name = name %}
          {% endif %}          
        {% endif %}
      {% endif %}   
    {% endfor %}
    {% if profile.temp_diff > mesh_temp_range %}
      {action_raise_error("Error: in LOAD_MESH_IN_RANGE no mesh in range found")}
    {% else %}
      M118 mesh profile found: {profile.name} diff: {profile.temp_diff}
      BED_MESH_PROFILE LOAD={profile.name}
    {% endif %}
  {% else %}
    {action_raise_error("Error: in LOAD_MESH_IN_RANGE unable to parse parameter BED_TEMP")}
  {% endif %}
